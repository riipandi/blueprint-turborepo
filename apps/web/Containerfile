# syntax=docker/dockerfile:1.7

# Arguments with default value (for build).
ARG PLATFORM=linux/amd64
ARG NODE_VERSION=20

# Turborepo Remote Caching
ARG TURBO_TEAM TURBO_TOKEN

FROM busybox:1.37-glibc as glibc
FROM joseluisq/static-web-server:2-debian as httpd

# -----------------------------------------------------------------------------
# Runner image with metadata: https://docs.docker.com/engine/manage-resources/labels
# -----------------------------------------------------------------------------
FROM --platform=${PLATFORM} gcr.io/distroless/base-debian12 as runner
LABEL org.opencontainers.image.source="https://github.com/riipandi/blueprint-turborepo"

# -----------------------------------------------------------------------------
# Base image with pnpm package manager.
# -----------------------------------------------------------------------------
FROM --platform=${PLATFORM} node:${NODE_VERSION}-bookworm-slim AS base
ENV COREPACK_ENABLE_DOWNLOAD_PROMPT=0 COREPACK_INTEGRITY_KEYS=0
ENV LEFTHOOK=0 PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=true CI=true
ENV PNPM_HOME="/pnpm" PATH="$PNPM_HOME:$PATH"
RUN apt-get update && apt-get -yqq --no-install-recommends install tini jq
RUN corepack enable && corepack prepare pnpm@latest-10 --activate
WORKDIR /srv

# -----------------------------------------------------------------------------
# Extract the monorepo and generate a partial monorepo with a pruned lockfile.
# -----------------------------------------------------------------------------
FROM base AS skeleton

# Copy the source files
COPY --link --chown=node:node . .

# Generate a partial monorepo with a pruned lockfile for a target workspace.
# Assuming "web" is the name entered in the project's package.json: { name: "web" }
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm dlx turbo prune web --docker

# -----------------------------------------------------------------------------
# Install dependencies and build the application.
# -----------------------------------------------------------------------------
FROM base AS builder
ENV TURBO_TEAM=$TURBO_TEAM TURBO_TOKEN=$TURBO_TOKEN

# Install the dependencies (as they change less often)
COPY --from=skeleton /srv/out/json/ .
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --ignore-scripts

# Build the project
COPY --from=skeleton /srv/out/full/ .
RUN --mount=type=cache,id=pnpm,target=/pnpm/store NODE_ENV=production pnpm build

# -----------------------------------------------------------------------------
# Production image, copy build output files and run the application (runner).
# -----------------------------------------------------------------------------
FROM runner

# Read application environment variables
ARG PUBLIC_BASE_URL

# Copy the build output files from previous stage.
COPY --chown=nonroot:nonroot --from=builder /srv/apps/web/dist /srv

# Copy the static web server from the httpd stage.
COPY --from=httpd /usr/local/bin/static-web-server /usr/bin/sws

# Copy some necessary system utilities from previous stage (~7MB).
# To enhance security, consider avoiding the copying of sysutils.
COPY --from=base /usr/bin/tini /usr/bin/tini
COPY --from=glibc /bin/clear /bin/clear
COPY --from=glibc /bin/mkdir /bin/mkdir
COPY --from=glibc /bin/which /bin/which
COPY --from=glibc /bin/cat /bin/cat
COPY --from=glibc /bin/ls /bin/ls
COPY --from=glibc /bin/sh /bin/sh

# Define the host and port to listen on.
ARG NODE_ENV=production SERVER_HOST=0.0.0.0 SERVER_PORT=3000
ENV SERVER_HOST=$SERVER_HOST SERVER_PORT=$SERVER_PORT
ENV NODE_ENV=$NODE_ENV TINI_SUBREAPER=true
STOPSIGNAL SIGQUIT

WORKDIR /srv
USER nonroot:nonroot
EXPOSE $SERVER_PORT

ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["/usr/bin/sws", "-d", "/srv", "--page-fallback", "/srv/index.html"]
